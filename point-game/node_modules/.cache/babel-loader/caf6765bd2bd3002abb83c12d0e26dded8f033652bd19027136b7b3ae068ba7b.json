{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\Projects\\\\GPL3\\\\point-game\\\\src\\\\Page.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport { Stage, Layer, Line, Circle } from 'react-konva';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst minCellSize = 21; // Taille minimale de cellule\nconst maxCellSize = 100; // Taille maximale de cellule\n\nconst Page = ({\n  numRows,\n  numCols,\n  plateau,\n  setPlateau,\n  width,\n  height\n}) => {\n  _s();\n  const [currentPlayer, setCurrentPlayer] = useState(1);\n  let totalPlayers = 2;\n  const marginTop = 100;\n  const marginBottom = 60;\n  const marginLeft = 120;\n  const marginRight = 40;\n  let a = width / numCols;\n  let b = height / numRows;\n  let scale = a > b ? Math.floor(a) : Math.floor(a); // �chelle pour les graduations\n\n  const [playerPoints, setPlayerPoints] = useState(Array.from({\n    length: totalPlayers\n  }, () => []));\n  const [playersCircuitsList, setPlayersCircuitsList] = useState(Array(totalPlayers).fill(null).map(() => []));\n  const [cellSize, setCellSize] = useState(40); // Taille de cellule initiale\n  const zoomSlider = useRef(null);\n  const adaptSize = newSize => {\n    if (newSize >= 21 && newSize <= 100) {\n      // Limites de taille de cellule\n      setCellSize(newSize);\n    }\n  };\n  const handleSliderChange = e => {\n    const newSize = parseInt(e.target.value);\n    adaptSize(newSize);\n  };\n  const handleWheelZoom = e => {\n    e.evt.preventDefault();\n    const delta = Math.sign(e.evt.deltaY); // Direction de la molette (1 pour haut, -1 pour bas)\n    const zoomFactor = delta > 0 ? 1 / 1.1 : 1.1;\n    const newCellSize = cellSize * zoomFactor;\n    adaptSize(newCellSize);\n    zoomSlider.current.value = cellSize;\n  };\n  const drawClosedCircuit = () => {\n    let lines = [];\n    for (let playerIndex = 0; playerIndex < totalPlayers; playerIndex++) {\n      let circuits = playersCircuitsList[playerIndex];\n      let color = playerIndex === 0 ? \"red\" : playerIndex === 1 ? \"blue\" : playerIndex === 2 ? 'green' : 'black';\n      for (let circuitIndex = 0; circuitIndex < circuits.length; circuitIndex++) {\n        const circuit = circuits[circuitIndex];\n        const points = circuit.flatMap(point => [marginLeft + (point.x - 1) * scale, marginTop + (point.y - 1) * scale]);\n        lines.push( /*#__PURE__*/_jsxDEV(Line, {\n          points: points,\n          stroke: color,\n          strokeWidth: 2,\n          closed: true // Fermer le circuit\n          ,\n          lineJoin: \"round\",\n          lineCap: \"round\"\n        }, `player-${playerIndex}-circuit-${circuitIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this));\n      }\n    }\n    return lines;\n  };\n  const renderHorizontalLines = () => {\n    const lines = [];\n    for (let i = 0; i <= numRows; i++) {\n      lines.push( /*#__PURE__*/_jsxDEV(Line, {\n        points: [0, marginTop + i * scale, marginLeft + width + marginRight, marginTop + i * scale],\n        stroke: \"#ddd\"\n      }, `hline${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this));\n    }\n    return lines;\n  };\n  const renderVerticalLines = () => {\n    const lines = [];\n    for (let i = 0; i <= numCols; i++) {\n      lines.push( /*#__PURE__*/_jsxDEV(Line, {\n        points: [marginLeft + i * scale, 0, marginLeft + i * scale, marginTop + height + marginBottom],\n        stroke: \"#ddd\"\n      }, `vline${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this));\n    }\n    return lines;\n  };\n  const getClosestIntersection = (x, y) => {\n    const closestX = Math.round((x - marginLeft) / cellSize) * cellSize;\n    const closestY = Math.round((y - marginTop) / cellSize) * cellSize;\n    return {\n      x: closestX + marginLeft,\n      y: closestY + marginTop\n    };\n  };\n  const isValidPoint = (x, y) => {\n    return x > marginLeft - 20 && x < marginLeft + width + 20 && y > marginTop - 20 && y < marginTop + height + 20;\n  };\n  const [mousePos, setMousePos] = useState({\n    x: 0,\n    y: 0\n  });\n  const handleMouseMove = event => {\n    const {\n      x,\n      y\n    } = event.target.getStage().getPointerPosition();\n    const {\n      x: closestX,\n      y: closestY\n    } = getClosestIntersection(x, y);\n    if (isValidPoint(x, y)) {\n      setMousePos({\n        x: closestX,\n        y: closestY\n      });\n    }\n  };\n  const handleClick = event => {\n    const {\n      x,\n      y\n    } = event.target.getStage().getPointerPosition();\n    const {\n      x: closestX,\n      y: closestY\n    } = getClosestIntersection(x, y);\n    const newX = Math.round((x - marginLeft) / cellSize) + 1;\n    const newY = Math.round((y - marginTop) / cellSize) + 1;\n    if (isValidPoint(x, y) && plateau[newY][newX] === 0) {\n      const updatedPlayerPoints = [...playerPoints];\n      updatedPlayerPoints[currentPlayer - 1].push({\n        x: closestX,\n        y: closestY\n      });\n      setPlayerPoints(updatedPlayerPoints);\n      plateau[newY][newX] = currentPlayer;\n      setPlateau([...plateau]);\n      sendDataToServer(plateau, {\n        x: newX,\n        y: newY\n      });\n    }\n  };\n  const sendDataToServer = async (plateau, dernierPoint) => {\n    try {\n      const response = await axios.put(\"http://localhost:7001/api/Game/ProcessData\", {\n        CircuitList: playersCircuitsList,\n        plateau: plateau,\n        dernierPoint: dernierPoint,\n        currentPlayer: currentPlayer\n      });\n      setCurrentPlayer(response.data.currentPlayer);\n      const circuitData = response.data.circuitList.map(playerCircuits => playerCircuits.map(circuit => circuit.map(point => ({\n        x: point.x,\n        y: point.y\n      }))));\n      setPlayersCircuitsList(circuitData);\n      const plateauData = response.data.plateau.map(row => row.map(cell => cell));\n      setPlateau(plateauData);\n    } catch (error) {\n      console.error('Une erreur s\\'est produite lors de l\\'envoi des donn�es au serveur :', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      id: \"zoomSlider\",\n      ref: zoomSlider,\n      min: minCellSize,\n      max: maxCellSize,\n      value: cellSize,\n      onChange: handleSliderChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Stage, {\n      width: marginLeft + width + marginRight,\n      height: marginTop + height + marginBottom,\n      onClick: handleClick,\n      onMouseMove: handleMouseMove,\n      onWheel: handleWheelZoom,\n      children: /*#__PURE__*/_jsxDEV(Layer, {\n        children: [renderHorizontalLines(), renderVerticalLines(), drawClosedCircuit(), /*#__PURE__*/_jsxDEV(Line, {\n          points: [0, 0, marginLeft + width + marginRight, 0],\n          stroke: \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          points: [0, 0, 0, marginTop + height + marginBottom],\n          stroke: \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this), playerPoints.map((points, playerIndex) => points.map((point, index) => /*#__PURE__*/_jsxDEV(Circle, {\n          x: point.x,\n          y: point.y,\n          radius: 5,\n          fill: playerIndex === 0 ? 'red' : playerIndex === 1 ? 'blue' : playerIndex === 2 ? 'green' : 'black'\n        }, `${playerIndex}-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 29\n        }, this))), isValidPoint(mousePos.x, mousePos.y) && /*#__PURE__*/_jsxDEV(Circle, {\n          x: mousePos.x,\n          y: mousePos.y,\n          radius: 10,\n          fill: currentPlayer === 1 ? 'red' : currentPlayer === 2 ? 'blue' : currentPlayer === 3 ? 'green' : 'black',\n          opacity: 0.5\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 9\n  }, this);\n};\n_s(Page, \"yj2kJbV+EC7zTZn8Pkk+xqf5H0k=\");\n_c = Page;\nPage.defaultProps = {\n  numRows: 22,\n  numCols: 10\n};\nexport default Page;\nvar _c;\n$RefreshReg$(_c, \"Page\");","map":{"version":3,"names":["React","useState","useRef","axios","Stage","Layer","Line","Circle","jsxDEV","_jsxDEV","minCellSize","maxCellSize","Page","numRows","numCols","plateau","setPlateau","width","height","_s","currentPlayer","setCurrentPlayer","totalPlayers","marginTop","marginBottom","marginLeft","marginRight","a","b","scale","Math","floor","playerPoints","setPlayerPoints","Array","from","length","playersCircuitsList","setPlayersCircuitsList","fill","map","cellSize","setCellSize","zoomSlider","adaptSize","newSize","handleSliderChange","e","parseInt","target","value","handleWheelZoom","evt","preventDefault","delta","sign","deltaY","zoomFactor","newCellSize","current","drawClosedCircuit","lines","playerIndex","circuits","color","circuitIndex","circuit","points","flatMap","point","x","y","push","stroke","strokeWidth","closed","lineJoin","lineCap","fileName","_jsxFileName","lineNumber","columnNumber","renderHorizontalLines","i","renderVerticalLines","getClosestIntersection","closestX","round","closestY","isValidPoint","mousePos","setMousePos","handleMouseMove","event","getStage","getPointerPosition","handleClick","newX","newY","updatedPlayerPoints","sendDataToServer","dernierPoint","response","put","CircuitList","data","circuitData","circuitList","playerCircuits","plateauData","row","cell","error","console","children","type","id","ref","min","max","onChange","onClick","onMouseMove","onWheel","index","radius","opacity","_c","defaultProps","$RefreshReg$"],"sources":["C:/Users/User/Documents/Projects/GPL3/point-game/src/Page.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport { Stage, Layer, Line, Circle } from 'react-konva';\n\r\nconst minCellSize = 21; // Taille minimale de cellule\r\nconst maxCellSize = 100; // Taille maximale de cellule\n\nconst Page = ({ numRows, numCols, plateau, setPlateau, width, height }) => {\n    const [currentPlayer, setCurrentPlayer] = useState(1);\n    let totalPlayers = 2;\n\n    const marginTop = 100;\n    const marginBottom = 60;\n    const marginLeft = 120;\n    const marginRight = 40;\n\n    let a = width / numCols;\n    let b = height / numRows;\n    let scale = a > b ? Math.floor(a) : Math.floor(a); // �chelle pour les graduations\n\n    const [playerPoints, setPlayerPoints] = useState(Array.from({ length: totalPlayers }, () => []));\n    const [playersCircuitsList, setPlayersCircuitsList] = useState(Array(totalPlayers).fill(null).map(() => []));\n    const [cellSize, setCellSize] = useState(40); // Taille de cellule initiale\n    const zoomSlider = useRef(null);\n\n    const adaptSize = (newSize) => {\n        if (newSize >= 21 && newSize <= 100) { // Limites de taille de cellule\n            setCellSize(newSize);\n        }\n    };\n\n    const handleSliderChange = (e) => {\n        const newSize = parseInt(e.target.value);\n        adaptSize(newSize);\n    };\n\n    const handleWheelZoom = (e) => {\n        e.evt.preventDefault();\n        const delta = Math.sign(e.evt.deltaY); // Direction de la molette (1 pour haut, -1 pour bas)\n        const zoomFactor = delta > 0 ? 1 / 1.1 : 1.1;\n\n        const newCellSize = cellSize * zoomFactor;\n        adaptSize(newCellSize);\n\n        zoomSlider.current.value = cellSize;\n    };\n\n    const drawClosedCircuit = () => {\r\n        let lines = [];\r\n\r\n        for (let playerIndex = 0; playerIndex < totalPlayers; playerIndex++) {\r\n            let circuits = playersCircuitsList[playerIndex];\r\n            let color = playerIndex === 0 ? \"red\" : playerIndex === 1 ? \"blue\" : playerIndex === 2 ? 'green' : 'black';\r\n\r\n            for (let circuitIndex = 0; circuitIndex < circuits.length; circuitIndex++) {\r\n                const circuit = circuits[circuitIndex];\r\n                const points = circuit.flatMap(point => [marginLeft + (point.x - 1) * scale, marginTop + (point.y - 1) * scale]);\r\n\r\n                lines.push(\r\n                    <Line\r\n                        key={`player-${playerIndex}-circuit-${circuitIndex}`}\r\n                        points={points}\r\n                        stroke={color}\r\n                        strokeWidth={2}\r\n                        closed={true} // Fermer le circuit\r\n                        lineJoin=\"round\"\r\n                        lineCap=\"round\"\r\n                    />\r\n                );\r\n            }\r\n        }\r\n\r\n        return lines;\n    };\n\n    const renderHorizontalLines = () => {\n        const lines = [];\n        for (let i = 0; i <= numRows; i++) {\n            lines.push(\n                <Line\n                    key={`hline${i}`}\n                    points={[0, marginTop + i * scale, marginLeft + width + marginRight, marginTop + i * scale]}\n                    stroke=\"#ddd\"\n                />\n            );\n        }\n        return lines;\n    };\n\n    const renderVerticalLines = () => {\n        const lines = [];\n        for (let i = 0; i <= numCols; i++) {\n            lines.push(\n                <Line\n                    key={`vline${i}`}\n                    points={[marginLeft + i * scale, 0, marginLeft + i * scale, marginTop + height + marginBottom]}\n                    stroke=\"#ddd\"\n                />\n            );\n        }\n        return lines;\n    };\n\n    const getClosestIntersection = (x, y) => {\n        const closestX = Math.round((x - marginLeft) / cellSize) * cellSize;\n        const closestY = Math.round((y - marginTop) / cellSize) * cellSize;\n\n        return { x: closestX + marginLeft, y: closestY + marginTop };\n    };\n\n    const isValidPoint = (x, y) => {\n        return ((x > marginLeft - 20) && (x < marginLeft + width + 20) && (y > marginTop - 20) && (y < marginTop + height + 20));\n    };\n\n    const [mousePos, setMousePos] = useState({ x: 0, y: 0 });\n\n    const handleMouseMove = (event) => {\n        const { x, y } = event.target.getStage().getPointerPosition();\n        const { x: closestX, y: closestY } = getClosestIntersection(x, y);\n\n        if (isValidPoint(x, y)) {\n            setMousePos({ x: closestX, y: closestY });\n        }\n    };\n\n    const handleClick = (event) => {\n        const { x, y } = event.target.getStage().getPointerPosition();\n        const { x: closestX, y: closestY } = getClosestIntersection(x, y);\n\n        const newX = Math.round((x - marginLeft) / cellSize) + 1;\n        const newY = Math.round((y - marginTop) / cellSize) + 1;\n\n        if (isValidPoint(x, y) && plateau[newY][newX] === 0) {\n            const updatedPlayerPoints = [...playerPoints];\n            updatedPlayerPoints[currentPlayer - 1].push({ x: closestX, y: closestY });\n            setPlayerPoints(updatedPlayerPoints);\n\n            plateau[newY][newX] = currentPlayer;\n            setPlateau([...plateau]);\n\n            sendDataToServer(plateau, { x: newX, y: newY });\n        }\n    };\n\n    const sendDataToServer = async (plateau, dernierPoint) => {\n        try {\n            const response = await axios.put(\"http://localhost:7001/api/Game/ProcessData\", {\n                CircuitList: playersCircuitsList,\n                plateau: plateau,\n                dernierPoint: dernierPoint,\n                currentPlayer: currentPlayer\n            });\n\n            setCurrentPlayer(response.data.currentPlayer);\n\n            const circuitData = response.data.circuitList.map(playerCircuits =>\n                playerCircuits.map(circuit => circuit.map(point => ({ x: point.x, y: point.y })))\n            );\n\n            setPlayersCircuitsList(circuitData);\n\n            const plateauData = response.data.plateau.map(row =>\n                row.map(cell => cell)\n            );\n\n            setPlateau(plateauData);\n\n        } catch (error) {\n            console.error('Une erreur s\\'est produite lors de l\\'envoi des donn�es au serveur :', error);\n        }\n    };\n\n    return (\n        <div>\n            <input\n                type=\"range\"\n                id=\"zoomSlider\"\n                ref={zoomSlider}\n                min={minCellSize}\n                max={maxCellSize}\n                value={cellSize}\n                onChange={handleSliderChange}\n            />\n            <Stage\n                width={marginLeft + width + marginRight}\n                height={marginTop + height + marginBottom}\n                onClick={handleClick}\n                onMouseMove={handleMouseMove}\n                onWheel={handleWheelZoom}\n            >\n                <Layer>\n                    {renderHorizontalLines()}\n                    {renderVerticalLines()}\n                    {drawClosedCircuit()}\n\n                    <Line points={[0, 0, marginLeft + width + marginRight, 0]} stroke=\"black\" />\n                    <Line points={[0, 0, 0, marginTop + height + marginBottom]} stroke=\"black\" />\n\n                    {playerPoints.map((points, playerIndex) =>\n                        points.map((point, index) => (\n                            <Circle\n                                key={`${playerIndex}-${index}`}\n                                x={point.x}\n                                y={point.y}\n                                radius={5}\n                                fill={playerIndex === 0 ? 'red' : playerIndex === 1 ? 'blue' : playerIndex === 2 ? 'green' : 'black'}\n                            />\n                        ))\n                    )}\n\n                    {isValidPoint(mousePos.x, mousePos.y) && (\n                        <Circle\n                            x={mousePos.x}\n                            y={mousePos.y}\n                            radius={10}\n                            fill={currentPlayer === 1 ? 'red' : currentPlayer === 2 ? 'blue' : currentPlayer === 3 ? 'green' : 'black'}\n                            opacity={0.5}\n                        />\n                    )}\n                </Layer>\n            </Stage>\n        </div>\n    );\n};\n\nPage.defaultProps = {\n    numRows: 22,\n    numCols: 10,\n};\n\nexport default Page;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}