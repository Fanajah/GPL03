{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\Projects\\\\GPL3\\\\point-game\\\\src\\\\Page.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { Stage, Layer, Line, Circle } from 'react-konva';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Page = ({\n  numRows,\n  numCols,\n  plateau,\n  setPlateau\n}) => {\n  _s();\n  const [currentPlayer, setCurrentPlayer] = useState(1);\n  let totalPlayers = 2;\n  const width = 450;\n  const height = 450;\n  const [marginTop, setMarginTop] = useState(100);\n  const [marginBottom, setMarginBottom] = useState(60);\n  const [marginLeft, setMarginLeft] = useState(120);\n  const [marginRight, setMarginRight] = useState(40);\n  let a = width / numCols;\n  let b = height / numRows;\n  //let s = a > b ? Math.floor(a) : Math.floor(a); // �chelle pour les graduations\n\n  const [scale, setScale] = useState(a > b ? Math.floor(a) : Math.floor(a));\n  const [echelle, setEchelle] = useState(1); // Nouvelle variable echelle � 1 par d�faut\n\n  // Gestionnaire d'�v�nements pour la molette\n  const handleWheel = event => {\n    event.evt.preventDefault(); // Utiliser l'�v�nement natif pour pr�venir le comportement par d�faut\n\n    setEchelle(event.evt.deltaY < 0 ? 1.1 : 1 / 1.1);\n    if (scale * echelle > 10) {\n      setScale(prevScale => prevScale * echelle);\n      // Ajuster les marges en fonction de l'�chelle\n      setMarginTop(prevMarginTop => prevMarginTop * echelle);\n      setMarginBottom(prevMarginBottom => prevMarginBottom * echelle);\n      setMarginLeft(prevMarginLeft => prevMarginLeft * echelle);\n      setMarginRight(prevMarginRight => prevMarginRight * echelle);\n    }\n    console.log(\"cell\", scale);\n  };\n  //scale = 50;\n\n  // Tableaux pour stocker les points de chaque joueur avec leur couleur\n  const [playerPoints, setPlayerPoints] = useState(Array.from({\n    length: totalPlayers\n  }, () => []));\n\n  // Initialisation des circuits pour chaque joueur\n  const [playersCircuitsList, setPlayersCircuitsList] = useState(Array(totalPlayers).fill(null).map(() => []));\n  const drawClosedCircuit = () => {\n    let lines = [];\n    for (let playerIndex = 0; playerIndex < totalPlayers; playerIndex++) {\n      let circuits = playersCircuitsList[playerIndex];\n      let color = playerIndex === 0 ? \"red\" : playerIndex === 1 ? \"blue\" : playerIndex === 2 ? 'green' : 'black';\n      for (let circuitIndex = 0; circuitIndex < circuits.length; circuitIndex++) {\n        const circuit = circuits[circuitIndex];\n        const points = circuit.flatMap(point => [marginLeft + (point.x - 1) * scale, marginTop + (point.y - 1) * scale]);\n        lines.push( /*#__PURE__*/_jsxDEV(Line, {\n          points: points,\n          stroke: color,\n          strokeWidth: 2,\n          closed: true // Fermer le circuit\n          ,\n          lineJoin: \"round\",\n          lineCap: \"round\"\n        }, `player-${playerIndex}-circuit-${circuitIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this));\n      }\n    }\n    return lines;\n  };\n  const renderHorizontalLines = () => {\n    const lines = [];\n    for (let i = 0; i <= numRows; i++) {\n      lines.push( /*#__PURE__*/_jsxDEV(Line, {\n        points: [0, marginTop + i * scale, marginLeft + width + marginRight, marginTop + i * scale],\n        stroke: \"#ddd\"\n      }, `hline${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this));\n    }\n    return lines;\n  };\n  const renderVerticalLines = () => {\n    const lines = [];\n    for (let i = 0; i <= numCols; i++) {\n      lines.push( /*#__PURE__*/_jsxDEV(Line, {\n        points: [marginLeft + i * scale, 0, marginLeft + i * scale, marginTop + height + marginBottom],\n        stroke: \"#ddd\"\n      }, `vline${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this));\n    }\n    return lines;\n  };\n\n  // Calculer l'intersection la plus proche\n  const getClosestIntersection = (x, y) => {\n    const closestX = Math.round((x - marginLeft) / scale) * scale;\n    const closestY = Math.round((y - marginTop) / scale) * scale;\n    return {\n      x: closestX + marginLeft,\n      y: closestY + marginTop\n    };\n  };\n  const isValidPoint = (x, y) => {\n    return x > marginLeft - 20 && x < marginLeft + width + 20 && y > marginTop - 20 && y < marginTop + height + 20;\n  };\n  const [mousePos, setMousePos] = useState({\n    x: 0,\n    y: 0\n  }); // �tat pour la position de la souris\n\n  // G�rer le mouvement de la souris \n  const handleMouseMove = event => {\n    const {\n      x,\n      y\n    } = event.target.getStage().getPointerPosition();\n    const {\n      x: closestX,\n      y: closestY\n    } = getClosestIntersection(x, y);\n    if (isValidPoint(x, y)) {\n      setMousePos({\n        x: closestX,\n        y: closestY\n      });\n    }\n  };\n\n  // ************************************************************************************************************* //\n  // *********** ATO NO MIASA LE GAME **************************************************************************** //\n  // ************************************************************************************************************* //\n  const handleClick = event => {\n    const {\n      x,\n      y\n    } = event.target.getStage().getPointerPosition();\n    const {\n      x: closestX,\n      y: closestY\n    } = getClosestIntersection(x, y);\n    const newX = Math.round((x - marginLeft) / scale) + 1; // Calcul de la colonne la plus proche\n    const newY = Math.round((y - marginTop) / scale) + 1; // Calcul de la ligne la plus proche\n\n    //console.log(\"ix\", newX, \" iy\", newY);\n\n    if (isValidPoint(x, y) && plateau[newY][newX] === 0) {\n      // Ajouter le point au joueur courant\n      const updatedPlayerPoints = [...playerPoints];\n      updatedPlayerPoints[currentPlayer - 1].push({\n        x: closestX,\n        y: closestY\n      });\n      setPlayerPoints(updatedPlayerPoints);\n\n      // Mettre � jour la case correspondante dans la matrice plateau\n      //const newPlateau = plateau.map((row, rowIndex) =>\n      //    row.map((value, colIndex) => (rowIndex === newY && colIndex === newX ? currentPlayer : value))\n      //);\n\n      plateau[newY][newX] = currentPlayer;\n\n      // Mettre � jour l'�tat plateau avec la nouvelle matrice\n      setPlateau(plateau);\n      //console.log(\"x\", newX, \" y\", newY);\n      //console.log(plateau, \" cp \", currentPlayer);\n\n      // Appel de la fonction avec les donn�es � envoyer\n      sendDataToServer(plateau, {\n        x: newX,\n        y: newY\n      });\n      //setCurrentPlayer(currentPlayer % totalPlayers + 1); \n    }\n  };\n  const sendDataToServer = async (plateau, dernierPoint) => {\n    try {\n      //https://localhost:44356\n      const response = await axios.put(\"http://localhost:7001/api/Game/ProcessData\", {\n        CircuitList: playersCircuitsList,\n        plateau: plateau,\n        dernierPoint: dernierPoint,\n        currentPlayer: currentPlayer\n      });\n\n      //console.log(response.data);\n      setCurrentPlayer(response.data.currentPlayer);\n      const circuitData = response.data.circuitList.map(playerCircuits => playerCircuits.map(circuit => circuit.map(point => ({\n        x: point.x,\n        y: point.y\n      }))));\n      setPlayersCircuitsList(circuitData);\n      const plateauData = response.data.plateau.map(row => row.map(cell => cell));\n\n      // Mettez � jour l'�tat avec la nouvelle structure de donn�es\n      setPlateau(plateauData);\n    } catch (error) {\n      console.error('Une erreur s\\'est produite lors de l\\'envoi des donn�es au serveur :', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: marginLeft + width + marginRight,\n    height: marginTop + height + marginBottom,\n    onClick: handleClick,\n    onMouseMove: handleMouseMove,\n    onWheel: handleWheel,\n    children: /*#__PURE__*/_jsxDEV(Layer, {\n      children: [renderHorizontalLines(), renderVerticalLines(), drawClosedCircuit(), /*#__PURE__*/_jsxDEV(Line, {\n        points: [0, 0, marginLeft + width + marginRight, 0],\n        stroke: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        points: [0, 0, 0, marginTop + height + marginBottom],\n        stroke: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this), playerPoints.map((points, playerIndex) => points.map((point, index) => /*#__PURE__*/_jsxDEV(Circle, {\n        x: point.x,\n        y: point.y,\n        radius: 5,\n        fill: playerIndex === 0 ? 'red' : playerIndex === 1 ? 'blue' : playerIndex === 2 ? 'green' : 'black' // Exemple de couleurs diff�rentes pour les joueurs\n      }, `${playerIndex}-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 25\n      }, this))), isValidPoint(mousePos.x, mousePos.y) && /*#__PURE__*/_jsxDEV(Circle, {\n        x: mousePos.x,\n        y: mousePos.y,\n        radius: 10,\n        fill: currentPlayer === 1 ? 'red' : currentPlayer === 2 ? 'blue' : currentPlayer === 3 ? 'green' : 'black',\n        opacity: 0.5 // Opacit� de 50%\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 9\n  }, this);\n};\n\n// Valeurs par d�faut pour les props\n_s(Page, \"o0banXJGlUsLSFlC+2lHMFizNW8=\");\n_c = Page;\nPage.defaultProps = {\n  numRows: 22,\n  numCols: 10\n};\nexport default Page;\nvar _c;\n$RefreshReg$(_c, \"Page\");","map":{"version":3,"names":["React","useState","axios","Stage","Layer","Line","Circle","jsxDEV","_jsxDEV","Page","numRows","numCols","plateau","setPlateau","_s","currentPlayer","setCurrentPlayer","totalPlayers","width","height","marginTop","setMarginTop","marginBottom","setMarginBottom","marginLeft","setMarginLeft","marginRight","setMarginRight","a","b","scale","setScale","Math","floor","echelle","setEchelle","handleWheel","event","evt","preventDefault","deltaY","prevScale","prevMarginTop","prevMarginBottom","prevMarginLeft","prevMarginRight","console","log","playerPoints","setPlayerPoints","Array","from","length","playersCircuitsList","setPlayersCircuitsList","fill","map","drawClosedCircuit","lines","playerIndex","circuits","color","circuitIndex","circuit","points","flatMap","point","x","y","push","stroke","strokeWidth","closed","lineJoin","lineCap","fileName","_jsxFileName","lineNumber","columnNumber","renderHorizontalLines","i","renderVerticalLines","getClosestIntersection","closestX","round","closestY","isValidPoint","mousePos","setMousePos","handleMouseMove","target","getStage","getPointerPosition","handleClick","newX","newY","updatedPlayerPoints","sendDataToServer","dernierPoint","response","put","CircuitList","data","circuitData","circuitList","playerCircuits","plateauData","row","cell","error","onClick","onMouseMove","onWheel","children","index","radius","opacity","_c","defaultProps","$RefreshReg$"],"sources":["C:/Users/User/Documents/Projects/GPL3/point-game/src/Page.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { Stage, Layer, Line, Circle } from 'react-konva';\n\nconst Page = ({ numRows, numCols, plateau, setPlateau }) => {\n    const [currentPlayer, setCurrentPlayer] = useState(1);\n    let totalPlayers = 2;\n\n    const width = 450;\n    const height = 450;\n\n    const [marginTop, setMarginTop] = useState(100);\n    const [marginBottom, setMarginBottom] = useState(60);\n    const [marginLeft, setMarginLeft] = useState(120);\n    const [marginRight, setMarginRight] = useState(40);\n\n    let a = width / numCols;\n    let b = height / numRows;\n    //let s = a > b ? Math.floor(a) : Math.floor(a); // �chelle pour les graduations\n\n    const [scale, setScale] = useState(a > b ? Math.floor(a) : Math.floor(a));\n    const [echelle, setEchelle] = useState(1); // Nouvelle variable echelle � 1 par d�faut\n\n    // Gestionnaire d'�v�nements pour la molette\n    const handleWheel = (event) => {\n        event.evt.preventDefault(); // Utiliser l'�v�nement natif pour pr�venir le comportement par d�faut\n\n        setEchelle(event.evt.deltaY < 0 ? 1.1 : 1 / 1.1);\n\n        if ((scale * echelle) > 10) {\n            setScale((prevScale) => prevScale * echelle);\n            // Ajuster les marges en fonction de l'�chelle\r\n            setMarginTop((prevMarginTop) => prevMarginTop * echelle);\r\n            setMarginBottom((prevMarginBottom) => prevMarginBottom * echelle);\r\n            setMarginLeft((prevMarginLeft) => prevMarginLeft * echelle);\r\n            setMarginRight((prevMarginRight) => prevMarginRight * echelle);\r\n        }\n\n        console.log(\"cell\", scale);\n    };\n    //scale = 50;\n\n\n    // Tableaux pour stocker les points de chaque joueur avec leur couleur\n    const [playerPoints, setPlayerPoints] = useState(Array.from({ length: totalPlayers }, () => []));\n\n\n    // Initialisation des circuits pour chaque joueur\n    const [playersCircuitsList, setPlayersCircuitsList] = useState(Array(totalPlayers).fill(null).map(() => []));\n\n\n\n    const drawClosedCircuit = () => {\n        let lines = [];\n\n        for (let playerIndex = 0; playerIndex < totalPlayers; playerIndex++) {\n            let circuits = playersCircuitsList[playerIndex];\n            let color = playerIndex === 0 ? \"red\" : playerIndex === 1 ? \"blue\" : playerIndex === 2 ? 'green' : 'black'; \n\n            for (let circuitIndex = 0; circuitIndex < circuits.length; circuitIndex++) {\n                const circuit = circuits[circuitIndex];\n                const points = circuit.flatMap(point => [marginLeft + (point.x - 1) * scale, marginTop + (point.y - 1) * scale]);\n\n                lines.push(\n                    <Line\n                        key={`player-${playerIndex}-circuit-${circuitIndex}`}\n                        points={points}\n                        stroke={color}\n                        strokeWidth={2}\n                        closed={true} // Fermer le circuit\n                        lineJoin=\"round\"\n                        lineCap=\"round\"\n                    />\n                );\n            }\n        }\n\n        return lines;\n    };\n\n    const renderHorizontalLines = () => {\n        const lines = [];\n        for (let i = 0; i <= numRows; i++) {\n            lines.push(\n                <Line\n                    key={`hline${i}`}\n                    points={[0, marginTop + i * scale, marginLeft + width + marginRight, marginTop + i * scale]}\n                    stroke=\"#ddd\"\n                />\n            );\n        }\n        return lines;\n    };\n\n    const renderVerticalLines = () => {\n        const lines = [];\n        for (let i = 0; i <= numCols; i++) {\n            lines.push(\n                <Line\n                    key={`vline${i}`}\n                    points={[marginLeft + i * scale, 0, marginLeft + i * scale, marginTop + height + marginBottom]}\n                    stroke=\"#ddd\"\n                />\n            );\n        }\n        return lines;\n    };\n\n    // Calculer l'intersection la plus proche\n    const getClosestIntersection = (x, y) => {\n        const closestX = Math.round((x - marginLeft) / scale) * scale;\n        const closestY = Math.round((y - marginTop) / scale) * scale;\n\n        return { x: closestX + marginLeft, y: closestY + marginTop };\n    };\n\n    const isValidPoint = (x, y) => {\n        return ((x > marginLeft - 20) && (x < marginLeft + width + 20) && (y > marginTop - 20) && (y < marginTop + height + 20));\n    }\n\n    const [mousePos, setMousePos] = useState({ x: 0, y: 0 }); // �tat pour la position de la souris\n\n    // G�rer le mouvement de la souris \n    const handleMouseMove = (event) => {\n        const { x, y } = event.target.getStage().getPointerPosition();\n        const { x: closestX, y: closestY } = getClosestIntersection(x, y);\n\n        if (isValidPoint(x, y)) {\n            setMousePos({ x: closestX, y: closestY });\n        }\n    };\n\n    // ************************************************************************************************************* //\n    // *********** ATO NO MIASA LE GAME **************************************************************************** //\n    // ************************************************************************************************************* //\n    const handleClick = (event) => {\n        const { x, y } = event.target.getStage().getPointerPosition();\n        const { x: closestX, y: closestY } = getClosestIntersection(x, y);\n\n\n        const newX = Math.round((x - marginLeft) / scale) + 1; // Calcul de la colonne la plus proche\n        const newY = Math.round((y - marginTop) / scale) + 1; // Calcul de la ligne la plus proche\n\n        //console.log(\"ix\", newX, \" iy\", newY);\n\n        if (isValidPoint(x, y) && plateau[newY][newX] === 0) {\n            // Ajouter le point au joueur courant\n            const updatedPlayerPoints = [...playerPoints];\n            updatedPlayerPoints[currentPlayer - 1].push({ x: closestX, y: closestY });\n            setPlayerPoints(updatedPlayerPoints);\n\n\n            // Mettre � jour la case correspondante dans la matrice plateau\n            //const newPlateau = plateau.map((row, rowIndex) =>\n            //    row.map((value, colIndex) => (rowIndex === newY && colIndex === newX ? currentPlayer : value))\n            //);\n\n            plateau[newY][newX] = currentPlayer;\n\n\n            // Mettre � jour l'�tat plateau avec la nouvelle matrice\n            setPlateau(plateau);\n            //console.log(\"x\", newX, \" y\", newY);\n            //console.log(plateau, \" cp \", currentPlayer);\n\n            // Appel de la fonction avec les donn�es � envoyer\n            sendDataToServer(plateau, { x: newX, y: newY });\n            //setCurrentPlayer(currentPlayer % totalPlayers + 1); \n\n        }\n    };\n\n    const sendDataToServer = async (plateau, dernierPoint) => {\n        try {//https://localhost:44356\n            const response = await axios.put(\"http://localhost:7001/api/Game/ProcessData\", {\n                CircuitList: playersCircuitsList,\n                plateau: plateau,\n                dernierPoint: dernierPoint,\n                currentPlayer: currentPlayer\n            });\n\n            //console.log(response.data);\n            setCurrentPlayer(response.data.currentPlayer); \n\n            const circuitData = response.data.circuitList.map(playerCircuits =>\n                playerCircuits.map(circuit => circuit.map(point => ({ x: point.x, y: point.y})))\n            );\n\n            setPlayersCircuitsList(circuitData);\n\n            const plateauData = response.data.plateau.map(row =>\n                row.map(cell => cell)\n            );\n\n            // Mettez � jour l'�tat avec la nouvelle structure de donn�es\n            setPlateau(plateauData);\n\n\n        } catch (error) {\n            console.error('Une erreur s\\'est produite lors de l\\'envoi des donn�es au serveur :', error);\n        }\n    };\n\n    return (\n        <Stage\n            width={marginLeft + width + marginRight}\n            height={marginTop + height + marginBottom}\n            onClick={handleClick}\n            onMouseMove={handleMouseMove}\n            onWheel={handleWheel}\n        >\n            <Layer>\n                {renderHorizontalLines()}\n                {renderVerticalLines()}\n\n                {drawClosedCircuit()}\n\n                {/* Axes */}\n                <Line points={[0, 0, marginLeft + width + marginRight, 0]} stroke=\"black\" />\n                <Line points={[0, 0, 0, marginTop + height + marginBottom]} stroke=\"black\" />\n\n                {/* Rendu des points par joueur */}\n                {playerPoints.map((points, playerIndex) =>\n                    points.map((point, index) => (\n                        <Circle\n                            key={`${playerIndex}-${index}`}\n                            x={point.x}\n                            y={point.y}\n                            radius={5}\n                            fill={playerIndex === 0 ? 'red' : playerIndex === 1 ? 'blue' : playerIndex === 2 ? 'green' : 'black'} // Exemple de couleurs diff�rentes pour les joueurs\n                        />\n                    ))\n                )}\n\n                {/* Cercle qui suit la souris */}\n                {isValidPoint(mousePos.x, mousePos.y) && (\n                    <Circle\n                        x={mousePos.x}\n                        y={mousePos.y}\n                        radius={10}\n                        fill={currentPlayer === 1 ? 'red' : currentPlayer === 2 ? 'blue' : currentPlayer === 3 ? 'green' : 'black'}\n                        opacity={0.5} // Opacit� de 50%\n                    />\n                )}\n\n            </Layer>\n        </Stage>\n    );\n};\n\n// Valeurs par d�faut pour les props\nPage.defaultProps = {\n    numRows: 22,\n    numCols: 10,\n};\n\nexport default Page;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}