{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\Projects\\\\GPL3\\\\point-game\\\\src\\\\Page.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { Stage, Layer, Line, Circle } from 'react-konva';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Page = ({\n  numRows,\n  numCols,\n  plateau,\n  setPlateau\n}) => {\n  _s();\n  const [currentPlayer, setCurrentPlayer] = useState(1);\n  let totalPlayers = 2;\n  const width = 750;\n  const height = 400;\n  const marginTop = 100;\n  const marginBottom = 60;\n  const marginLeft = 120;\n  const marginRight = 40;\n  let a = width / numCols;\n  let b = height / numRows;\n  let scale = a > b ? Math.floor(a) : Math.floor(a); // �chelle pour les graduations\n  scale = 50;\n\n  // Tableaux pour stocker les points de chaque joueur avec leur couleur\n  const [playerPoints, setPlayerPoints] = useState(Array.from({\n    length: totalPlayers\n  }, () => []));\n  let playersCircuitsList = [2];\n  const generateRandomPointsList = count => {\n    const points = [];\n    for (let i = 0; i < count; i++) {\n      const x = Math.floor(Math.random() * 100);\n      const y = Math.floor(Math.random() * 100);\n      points.push({\n        x,\n        y\n      });\n    }\n    return points;\n  };\n  playersCircuitsList[0].add(generateRandomPointsList(4));\n  playersCircuitsList[0].add(generateRandomPointsList(4));\n  playersCircuitsList[1].add(generateRandomPointsList(4));\n  const drawClosedCircuit = () => {\n    let lines = [];\n    for (let playerIndex = 0; playerIndex < totalPlayers; playerIndex++) {\n      let circuits = playersCircuitsList[playerIndex];\n      let color = playerIndex === 0 ? \"red\" : \"blue\"; // Vous pouvez ajouter plus de couleurs si n�cessaire\n\n      for (let circuitIndex = 0; circuitIndex < circuits.length; circuitIndex++) {\n        const circuit = circuits[circuitIndex];\n        const points = circuit.flatMap(point => [point.x, point.y]);\n        lines.push( /*#__PURE__*/_jsxDEV(Line, {\n          points: points,\n          stroke: color,\n          strokeWidth: 2,\n          closed: true // Fermer le circuit\n          ,\n          lineJoin: \"round\",\n          lineCap: \"round\"\n        }, `player-${playerIndex}-circuit-${circuitIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this));\n      }\n    }\n    return lines;\n  };\n  const renderHorizontalLines = () => {\n    const lines = [];\n    for (let i = 0; i <= numRows; i++) {\n      lines.push( /*#__PURE__*/_jsxDEV(Line, {\n        points: [0, marginTop + i * scale, marginLeft + width + marginRight, marginTop + i * scale],\n        stroke: \"#ddd\"\n      }, `hline${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this));\n    }\n    return lines;\n  };\n  const renderVerticalLines = () => {\n    const lines = [];\n    for (let i = 0; i <= numCols; i++) {\n      lines.push( /*#__PURE__*/_jsxDEV(Line, {\n        points: [marginLeft + i * scale, 0, marginLeft + i * scale, marginTop + height + marginBottom],\n        stroke: \"#ddd\"\n      }, `vline${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this));\n    }\n    return lines;\n  };\n\n  // Calculer l'intersection la plus proche\n  const getClosestIntersection = (x, y) => {\n    const closestX = Math.round((x - marginLeft) / scale) * scale;\n    const closestY = Math.round((y - marginTop) / scale) * scale;\n    return {\n      x: closestX + marginLeft,\n      y: closestY + marginTop\n    };\n  };\n  const isValidPoint = (x, y) => {\n    return x > marginLeft - 20 && x < marginLeft + width + 20 && y > marginTop - 20 && y < marginTop + height + 20;\n  };\n  const [mousePos, setMousePos] = useState({\n    x: 0,\n    y: 0\n  }); // �tat pour la position de la souris\n\n  // G�rer le mouvement de la souris \n  const handleMouseMove = event => {\n    const {\n      x,\n      y\n    } = event.target.getStage().getPointerPosition();\n    const {\n      x: closestX,\n      y: closestY\n    } = getClosestIntersection(x, y);\n    if (isValidPoint(x, y)) {\n      setMousePos({\n        x: closestX,\n        y: closestY\n      });\n    }\n  };\n\n  // ************************************************************************************************************* //\n  // *********** ATO NO MIASA LE GAME **************************************************************************** //\n  // ************************************************************************************************************* //\n  const handleClick = event => {\n    const {\n      x,\n      y\n    } = event.target.getStage().getPointerPosition();\n    const {\n      x: closestX,\n      y: closestY\n    } = getClosestIntersection(x, y);\n    const newX = Math.round((x - marginLeft) / scale); // Calcul de la colonne la plus proche\n    const newY = Math.round((y - marginTop) / scale); // Calcul de la ligne la plus proche\n\n    //console.log(\"ix\", newX, \" iy\", newY);\n\n    if (isValidPoint(x, y)) {\n      // Ajouter le point au joueur courant\n      const updatedPlayerPoints = [...playerPoints];\n      updatedPlayerPoints[currentPlayer - 1].push({\n        x: closestX,\n        y: closestY\n      });\n      setPlayerPoints(updatedPlayerPoints);\n\n      // Mettre � jour la case correspondante dans la matrice plateau\n      const newPlateau = plateau.map((row, rowIndex) => row.map((value, colIndex) => rowIndex === newY + 1 && colIndex === newX + 1 ? currentPlayer : value));\n\n      // Mettre � jour l'�tat plateau avec la nouvelle matrice\n      setPlateau(newPlateau);\n      setCurrentPlayer(currentPlayer % totalPlayers + 1);\n\n      // Appel de la fonction avec les donn�es � envoyer\n      sendDataToServer(newPlateau, {\n        x: newX + 1,\n        y: newY + 1\n      });\n    }\n  };\n  const sendDataToServer = async (plateau, dernierPoint) => {\n    try {\n      const response = await axios.put(\"https://localhost:44356/api/Game/ProcessData\", {\n        plateau: plateau,\n        dernierPoint: dernierPoint\n      });\n      console.log(response.data);\n    } catch (error) {\n      console.error('Une erreur s\\'est produite lors de l\\'envoi des donn�es au serveur :', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: marginLeft + width + marginRight,\n    height: marginTop + height + marginBottom,\n    onClick: handleClick,\n    onMouseMove: handleMouseMove,\n    children: /*#__PURE__*/_jsxDEV(Layer, {\n      children: [renderHorizontalLines(), renderVerticalLines(), drawClosedCircuit(), /*#__PURE__*/_jsxDEV(Line, {\n        points: [0, 0, marginLeft + width + marginRight, 0],\n        stroke: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        points: [0, 0, 0, marginTop + height + marginBottom],\n        stroke: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this), playerPoints.map((points, playerIndex) => points.map((point, index) => /*#__PURE__*/_jsxDEV(Circle, {\n        x: point.x,\n        y: point.y,\n        radius: 5,\n        fill: playerIndex === 0 ? 'red' : 'blue' // Exemple de couleurs diff�rentes pour les joueurs\n      }, `${playerIndex}-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 25\n      }, this))), isValidPoint(mousePos.x, mousePos.y) && /*#__PURE__*/_jsxDEV(Circle, {\n        x: mousePos.x,\n        y: mousePos.y,\n        radius: 10,\n        fill: currentPlayer === 1 ? 'red' : 'blue',\n        opacity: 0.5 // Opacit� de 50%\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 9\n  }, this);\n};\n\n// Valeurs par d�faut pour les props\n_s(Page, \"Lhnf0uBf89Qeisc335UNWdCbTTM=\");\n_c = Page;\nPage.defaultProps = {\n  numRows: 22,\n  numCols: 10\n};\nexport default Page;\nvar _c;\n$RefreshReg$(_c, \"Page\");","map":{"version":3,"names":["React","useState","axios","Stage","Layer","Line","Circle","jsxDEV","_jsxDEV","Page","numRows","numCols","plateau","setPlateau","_s","currentPlayer","setCurrentPlayer","totalPlayers","width","height","marginTop","marginBottom","marginLeft","marginRight","a","b","scale","Math","floor","playerPoints","setPlayerPoints","Array","from","length","playersCircuitsList","generateRandomPointsList","count","points","i","x","random","y","push","add","drawClosedCircuit","lines","playerIndex","circuits","color","circuitIndex","circuit","flatMap","point","stroke","strokeWidth","closed","lineJoin","lineCap","fileName","_jsxFileName","lineNumber","columnNumber","renderHorizontalLines","renderVerticalLines","getClosestIntersection","closestX","round","closestY","isValidPoint","mousePos","setMousePos","handleMouseMove","event","target","getStage","getPointerPosition","handleClick","newX","newY","updatedPlayerPoints","newPlateau","map","row","rowIndex","value","colIndex","sendDataToServer","dernierPoint","response","put","console","log","data","error","onClick","onMouseMove","children","index","radius","fill","opacity","_c","defaultProps","$RefreshReg$"],"sources":["C:/Users/User/Documents/Projects/GPL3/point-game/src/Page.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { Stage, Layer, Line, Circle } from 'react-konva';\n\nconst Page = ({ numRows, numCols, plateau, setPlateau }) => {\n    const [currentPlayer, setCurrentPlayer] = useState(1);\n    let totalPlayers = 2;\n\n    const width = 750;\n    const height = 400;\n\n    const marginTop = 100;\n    const marginBottom = 60;\n    const marginLeft = 120;\n    const marginRight = 40;\n\n    let a = width / numCols;\n    let b = height / numRows;\n    let scale = a > b ? Math.floor(a) : Math.floor(a); // �chelle pour les graduations\n    scale = 50;\n\n    // Tableaux pour stocker les points de chaque joueur avec leur couleur\n    const [playerPoints, setPlayerPoints] = useState(Array.from({ length: totalPlayers }, () => []));\n\n\n    let playersCircuitsList = [2];\n\n    const generateRandomPointsList = (count) => {\r\n        const points = [];\r\n        for (let i = 0; i < count; i++) {\r\n            const x = Math.floor(Math.random() * 100);\r\n            const y = Math.floor(Math.random() * 100);\r\n            points.push({ x, y });\r\n        }\r\n        return points;\r\n    };\n\n    playersCircuitsList[0].add(generateRandomPointsList(4));\n    playersCircuitsList[0].add(generateRandomPointsList(4));\n    playersCircuitsList[1].add(generateRandomPointsList(4));\n\n    const drawClosedCircuit = () => {\r\n        let lines = [];\r\n\r\n        for (let playerIndex = 0; playerIndex < totalPlayers; playerIndex++) {\r\n            let circuits = playersCircuitsList[playerIndex];\r\n            let color = playerIndex === 0 ? \"red\" : \"blue\"; // Vous pouvez ajouter plus de couleurs si n�cessaire\r\n\r\n            for (let circuitIndex = 0; circuitIndex < circuits.length; circuitIndex++) {\r\n                const circuit = circuits[circuitIndex];\r\n                const points = circuit.flatMap(point => [point.x, point.y]);\r\n\r\n                lines.push(\r\n                    <Line\r\n                        key={`player-${playerIndex}-circuit-${circuitIndex}`}\r\n                        points={points}\r\n                        stroke={color}\r\n                        strokeWidth={2}\r\n                        closed={true} // Fermer le circuit\r\n                        lineJoin=\"round\"\r\n                        lineCap=\"round\"\r\n                    />\r\n                );\r\n            }\r\n        }\r\n\r\n        return lines;\n    };\n\n    const renderHorizontalLines = () => {\n        const lines = [];\n        for (let i = 0; i <= numRows; i++) {\n            lines.push(\n                <Line\n                    key={`hline${i}`}\n                    points={[0, marginTop + i * scale, marginLeft + width + marginRight, marginTop + i * scale]}\n                    stroke=\"#ddd\"\n                />\n            );\n        }\n        return lines;\n    };\n\n    const renderVerticalLines = () => {\n        const lines = [];\n        for (let i = 0; i <= numCols; i++) {\n            lines.push(\n                <Line\n                    key={`vline${i}`}\n                    points={[marginLeft + i * scale, 0, marginLeft + i * scale, marginTop + height + marginBottom]}\n                    stroke=\"#ddd\"\n                />\n            );\n        }\n        return lines;\n    };\n\n    // Calculer l'intersection la plus proche\n    const getClosestIntersection = (x, y) => {\n        const closestX = Math.round((x - marginLeft) / scale) * scale;\n        const closestY = Math.round((y - marginTop) / scale) * scale;\n\n        return { x: closestX + marginLeft, y: closestY + marginTop };\n    };\n\n    const isValidPoint = (x, y) => {\n        return ((x > marginLeft - 20) && (x < marginLeft + width + 20) && (y > marginTop - 20) && (y < marginTop + height + 20));\n    }\n\n    const [mousePos, setMousePos] = useState({ x: 0, y: 0 }); // �tat pour la position de la souris\n\n    // G�rer le mouvement de la souris \n    const handleMouseMove = (event) => {\n        const { x, y } = event.target.getStage().getPointerPosition();\n        const { x: closestX, y: closestY } = getClosestIntersection(x, y);\n\n        if (isValidPoint(x, y)) {\n            setMousePos({ x: closestX, y: closestY });\n        }\n    };\n\n    // ************************************************************************************************************* //\n    // *********** ATO NO MIASA LE GAME **************************************************************************** //\n    // ************************************************************************************************************* //\n    const handleClick = (event) => {\n        const { x, y } = event.target.getStage().getPointerPosition();\n        const { x: closestX, y: closestY } = getClosestIntersection(x, y);\n\n\n        const newX = Math.round((x - marginLeft) / scale); // Calcul de la colonne la plus proche\n        const newY = Math.round((y - marginTop) / scale); // Calcul de la ligne la plus proche\n\n        //console.log(\"ix\", newX, \" iy\", newY);\n\n        if (isValidPoint(x, y)) {\n            // Ajouter le point au joueur courant\n            const updatedPlayerPoints = [...playerPoints];\n            updatedPlayerPoints[currentPlayer - 1].push({ x: closestX, y: closestY });\n            setPlayerPoints(updatedPlayerPoints);\n\n\n            // Mettre � jour la case correspondante dans la matrice plateau\n            const newPlateau = plateau.map((row, rowIndex) =>\n                row.map((value, colIndex) => (rowIndex === newY + 1 && colIndex === newX + 1 ? currentPlayer : value))\n            );\n\n            // Mettre � jour l'�tat plateau avec la nouvelle matrice\n            setPlateau(newPlateau);\n\n            setCurrentPlayer((currentPlayer % totalPlayers) + 1); \n\n            // Appel de la fonction avec les donn�es � envoyer\n            sendDataToServer(newPlateau, { x: newX + 1, y: newY + 1 });\n        }\n    };\n\n    const sendDataToServer = async (plateau, dernierPoint) => {\n        try {\n            const response = await axios.put(\"https://localhost:44356/api/Game/ProcessData\", {\n                plateau: plateau,\n                dernierPoint: dernierPoint\n            });\n\n            console.log(response.data);\n\n        } catch (error) {\n            console.error('Une erreur s\\'est produite lors de l\\'envoi des donn�es au serveur :', error);\n        }\n    };\n\n    return (\n        <Stage\n            width={marginLeft + width + marginRight}\n            height={marginTop + height + marginBottom}\n            onClick={handleClick}\n            onMouseMove={handleMouseMove}\n        >\n            <Layer>\n                {renderHorizontalLines()}\n                {renderVerticalLines()}\n\r\n                {drawClosedCircuit()}\n\n                {/* Axes */}\n                <Line points={[0, 0, marginLeft + width + marginRight, 0]} stroke=\"black\" />\n                <Line points={[0, 0, 0, marginTop + height + marginBottom]} stroke=\"black\" />\n\n                {/* Rendu des points par joueur */}\n                {playerPoints.map((points, playerIndex) =>\n                    points.map((point, index) => (\n                        <Circle\n                            key={`${playerIndex}-${index}`}\n                            x={point.x}\n                            y={point.y}\n                            radius={5}\n                            fill={playerIndex === 0 ? 'red' : 'blue'} // Exemple de couleurs diff�rentes pour les joueurs\n                        />\n                    ))\n                )}\n\n                {/* Cercle qui suit la souris */}\n                {isValidPoint(mousePos.x, mousePos.y) && (\n                    <Circle\n                        x={mousePos.x}\n                        y={mousePos.y}\n                        radius={10}\n                        fill={currentPlayer === 1 ? 'red' : 'blue'}\n                        opacity={0.5} // Opacit� de 50%\n                    />\n                )}\n\n            </Layer>\n        </Stage>\n    );\n};\n\n// Valeurs par d�faut pour les props\nPage.defaultProps = {\n    numRows: 22,\n    numCols: 10,\n};\n\nexport default Page;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}