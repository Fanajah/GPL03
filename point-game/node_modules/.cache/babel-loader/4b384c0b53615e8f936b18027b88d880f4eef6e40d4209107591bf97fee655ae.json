{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\Projects\\\\GPL3\\\\point-game\\\\src\\\\Page.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Stage, Layer, Line, Circle } from 'react-konva';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Page = ({\n  numRows,\n  numCols,\n  plateau,\n  setPlateau\n}) => {\n  _s();\n  const [currentPlayer, setCurrentPlayer] = useState(1);\n  let totalPlayers = 2;\n  const width = 750;\n  const height = 400;\n  const marginTop = 100;\n  const marginBottom = 60;\n  const marginLeft = 120;\n  const marginRight = 40;\n  let a = width / numCols;\n  let b = height / numRows;\n  let scale = a > b ? Math.floor(a) : Math.floor(a); // �chelle pour les graduations\n  scale = 50;\n\n  // Tableaux pour stocker les points de chaque joueur avec leur couleur\n  const [playerPoints, setPlayerPoints] = useState(Array.from({\n    length: totalPlayers\n  }, () => []));\n  const renderHorizontalLines = () => {\n    const lines = [];\n    for (let i = 0; i <= numRows; i++) {\n      lines.push( /*#__PURE__*/_jsxDEV(Line, {\n        points: [0, marginTop + i * scale, marginLeft + width + marginRight, marginTop + i * scale],\n        stroke: \"#ddd\"\n      }, `hline${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this));\n    }\n    return lines;\n  };\n  const renderVerticalLines = () => {\n    const lines = [];\n    for (let i = 0; i <= numCols; i++) {\n      lines.push( /*#__PURE__*/_jsxDEV(Line, {\n        points: [marginLeft + i * scale, 0, marginLeft + i * scale, marginTop + height + marginBottom],\n        stroke: \"#ddd\"\n      }, `vline${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this));\n    }\n    return lines;\n  };\n\n  // Calculer l'intersection la plus proche\n  const getClosestIntersection = (x, y) => {\n    const closestX = Math.round((x - marginLeft) / scale) * scale;\n    const closestY = Math.round((y - marginTop) / scale) * scale;\n    return {\n      x: closestX + marginLeft,\n      y: closestY + marginTop\n    };\n  };\n  const isValidPoint = (x, y) => {\n    return x > marginLeft - 20 && x < marginLeft + width + 20 && y > marginTop - 20 && y < marginTop + height + 50;\n  };\n  const [mousePos, setMousePos] = useState({\n    x: 0,\n    y: 0\n  }); // �tat pour la position de la souris\n\n  // G�rer le mouvement de la souris \n  const handleMouseMove = event => {/*\r\n                                    const { x, y } = event.target.getStage().getPointerPosition();\r\n                                    const { x: closestX, y: closestY } = getClosestIntersection(x, y);\r\n                                    if (isValidPoint(x, y)) {\r\n                                    setMousePos({ x: closestX, y: closestY });\r\n                                    }*/\n  };\n\n  // ************************************************************************************************************* //\n  // *********** ATO NO MIASA LE GAME **************************************************************************** //\n  // ************************************************************************************************************* //\n  const handleClick = event => {\n    const {\n      x,\n      y\n    } = event.target.getStage().getPointerPosition();\n    const {\n      x: closestX,\n      y: closestY\n    } = getClosestIntersection(x, y);\n    const newX = Math.round((x - marginLeft) / scale); // Calcul de la colonne la plus proche\n    const newY = Math.round((y - marginTop) / scale); // Calcul de la ligne la plus proche\n\n    //console.log(\"ix\", newX, \" iy\", newY);\n\n    if (isValidPoint(x, y)) {\n      // Ajouter le point au joueur courant\n      const updatedPlayerPoints = [...playerPoints];\n      updatedPlayerPoints[currentPlayer - 1].push({\n        x: closestX,\n        y: closestY\n      });\n      setPlayerPoints(updatedPlayerPoints);\n\n      // Mettre � jour la case correspondante dans la matrice plateau\n      const newPlateau = plateau.map((row, rowIndex) => row.map((value, colIndex) => rowIndex === newY + 1 && colIndex === newX + 1 ? currentPlayer : value));\n\n      // Mettre � jour l'�tat plateau avec la nouvelle matrice\n      setPlateau(newPlateau);\n      setCurrentPlayer(currentPlayer % totalPlayers + 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: marginLeft + width + marginRight,\n    height: marginTop + height + marginBottom,\n    onClick: handleClick,\n    onMouseMove: handleMouseMove,\n    children: /*#__PURE__*/_jsxDEV(Layer, {\n      children: [renderHorizontalLines(), renderVerticalLines(), /*#__PURE__*/_jsxDEV(Line, {\n        points: [0, 0, marginLeft + width + marginRight, 0],\n        stroke: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        points: [0, 0, 0, marginTop + height + marginBottom],\n        stroke: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), playerPoints.map((points, playerIndex) => points.map((point, index) => /*#__PURE__*/_jsxDEV(Circle, {\n        x: point.x,\n        y: point.y,\n        radius: 5,\n        fill: playerIndex === 0 ? 'red' : 'blue' // Exemple de couleurs diff�rentes pour les joueurs\n      }, `${playerIndex}-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 25\n      }, this))), isValidPoint(mousePos.x, mousePos.y) && /*#__PURE__*/_jsxDEV(Circle, {\n        x: mousePos.x,\n        y: mousePos.y,\n        radius: 10,\n        fill: \"red\",\n        opacity: 0.5 // Opacit� de 50%\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n};\n\n// Valeurs par d�faut pour les props\n_s(Page, \"Lhnf0uBf89Qeisc335UNWdCbTTM=\");\n_c = Page;\nPage.defaultProps = {\n  numRows: 22,\n  numCols: 10\n};\nexport default Page;\nvar _c;\n$RefreshReg$(_c, \"Page\");","map":{"version":3,"names":["React","useState","Stage","Layer","Line","Circle","jsxDEV","_jsxDEV","Page","numRows","numCols","plateau","setPlateau","_s","currentPlayer","setCurrentPlayer","totalPlayers","width","height","marginTop","marginBottom","marginLeft","marginRight","a","b","scale","Math","floor","playerPoints","setPlayerPoints","Array","from","length","renderHorizontalLines","lines","i","push","points","stroke","fileName","_jsxFileName","lineNumber","columnNumber","renderVerticalLines","getClosestIntersection","x","y","closestX","round","closestY","isValidPoint","mousePos","setMousePos","handleMouseMove","event","handleClick","target","getStage","getPointerPosition","newX","newY","updatedPlayerPoints","newPlateau","map","row","rowIndex","value","colIndex","onClick","onMouseMove","children","playerIndex","point","index","radius","fill","opacity","_c","defaultProps","$RefreshReg$"],"sources":["C:/Users/User/Documents/Projects/GPL3/point-game/src/Page.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Stage, Layer, Line, Circle } from 'react-konva';\r\n\r\nconst Page = ({ numRows, numCols, plateau, setPlateau }) => {\r\n    const [currentPlayer, setCurrentPlayer] = useState(1);\r\n    let totalPlayers = 2;\r\n\r\n    const width = 750;\r\n    const height = 400;\r\n\r\n    const marginTop = 100;\r\n    const marginBottom = 60;\r\n    const marginLeft = 120;\r\n    const marginRight = 40;\r\n\r\n    let a = width / numCols;\r\n    let b = height / numRows;\r\n    let scale = a > b ? Math.floor(a) : Math.floor(a); // �chelle pour les graduations\r\n    scale = 50;\r\n\r\n\r\n    // Tableaux pour stocker les points de chaque joueur avec leur couleur\r\n    const [playerPoints, setPlayerPoints] = useState(Array.from({ length: totalPlayers }, () => []));\r\n\r\n\r\n    const renderHorizontalLines = () => {\r\n        const lines = [];\r\n        for (let i = 0; i <= numRows; i++) {\r\n            lines.push(\r\n                <Line\r\n                    key={`hline${i}`}\r\n                    points={[0, marginTop + i * scale, marginLeft + width + marginRight, marginTop + i * scale]}\r\n                    stroke=\"#ddd\"\r\n                />\r\n            );\r\n        }\r\n        return lines;\r\n    };\r\n\r\n    const renderVerticalLines = () => {\r\n        const lines = [];\r\n        for (let i = 0; i <= numCols; i++) {\r\n            lines.push(\r\n                <Line\r\n                    key={`vline${i}`}\r\n                    points={[marginLeft + i * scale, 0, marginLeft + i * scale, marginTop + height + marginBottom]}\r\n                    stroke=\"#ddd\"\r\n                />\r\n            );\r\n        }\r\n        return lines;\r\n    };\r\n\r\n    // Calculer l'intersection la plus proche\r\n    const getClosestIntersection = (x, y) => {\r\n        const closestX = Math.round((x - marginLeft) / scale) * scale;\r\n        const closestY = Math.round((y - marginTop) / scale) * scale;\r\n\r\n        return { x: closestX + marginLeft, y: closestY + marginTop };\r\n    };\r\n\r\n    const isValidPoint = (x, y) => {\r\n        return ((x > marginLeft - 20) && (x < marginLeft + width + 20) && (y > marginTop - 20) && (y < marginTop + height + 50));\r\n    }\r\n\r\n    const [mousePos, setMousePos] = useState({ x: 0, y: 0 }); // �tat pour la position de la souris\r\n\r\n    // G�rer le mouvement de la souris \r\n    const handleMouseMove = (event) => {/*\r\n        const { x, y } = event.target.getStage().getPointerPosition();\r\n        const { x: closestX, y: closestY } = getClosestIntersection(x, y);\r\n\r\n        if (isValidPoint(x, y)) {\r\n            setMousePos({ x: closestX, y: closestY });\r\n        }*/\r\n    };\r\n\r\n    // ************************************************************************************************************* //\r\n    // *********** ATO NO MIASA LE GAME **************************************************************************** //\r\n    // ************************************************************************************************************* //\r\n    const handleClick = (event) => {\r\n        const { x, y } = event.target.getStage().getPointerPosition();\r\n        const { x: closestX, y: closestY } = getClosestIntersection(x, y);\r\n\r\n\r\n        const newX = Math.round((x - marginLeft) / scale); // Calcul de la colonne la plus proche\r\n        const newY = Math.round((y - marginTop) / scale); // Calcul de la ligne la plus proche\r\n\r\n        //console.log(\"ix\", newX, \" iy\", newY);\r\n\r\n        if (isValidPoint(x, y)) {\r\n            // Ajouter le point au joueur courant\r\n            const updatedPlayerPoints = [...playerPoints];\r\n            updatedPlayerPoints[currentPlayer - 1].push({ x: closestX, y: closestY });\r\n            setPlayerPoints(updatedPlayerPoints);\r\n\r\n\r\n            // Mettre � jour la case correspondante dans la matrice plateau\r\n            const newPlateau = plateau.map((row, rowIndex) =>\r\n                row.map((value, colIndex) => (rowIndex === newY + 1 && colIndex === newX + 1 ? currentPlayer : value))\r\n            );\r\n\r\n            // Mettre � jour l'�tat plateau avec la nouvelle matrice\r\n            setPlateau(newPlateau);\r\n\r\n            setCurrentPlayer((currentPlayer % totalPlayers) + 1); \r\n        }\r\n    };\r\n\r\n    return (\r\n        <Stage\r\n            width={marginLeft + width + marginRight}\r\n            height={marginTop + height + marginBottom}\r\n            onClick={handleClick}\r\n            onMouseMove={handleMouseMove}\r\n        >\r\n            <Layer>\r\n                {renderHorizontalLines()}\r\n                {renderVerticalLines()}\r\n\r\n                {/* Axes */}\r\n                <Line points={[0, 0, marginLeft + width + marginRight, 0]} stroke=\"black\" />\r\n                <Line points={[0, 0, 0, marginTop + height + marginBottom]} stroke=\"black\" />\r\n\r\n                {/* Rendu des points par joueur */}\r\n                {playerPoints.map((points, playerIndex) =>\r\n                    points.map((point, index) => (\r\n                        <Circle\r\n                            key={`${playerIndex}-${index}`}\r\n                            x={point.x}\r\n                            y={point.y}\r\n                            radius={5}\r\n                            fill={playerIndex === 0 ? 'red' : 'blue'} // Exemple de couleurs diff�rentes pour les joueurs\r\n                        />\r\n                    ))\r\n                )}\r\n\r\n                {/* Cercle qui suit la souris */}\r\n                {isValidPoint(mousePos.x, mousePos.y) && (\r\n                    <Circle\r\n                        x={mousePos.x}\r\n                        y={mousePos.y}\r\n                        radius={10}\r\n                        fill=\"red\"\r\n                        opacity={0.5} // Opacit� de 50%\r\n                    />\r\n                )}\r\n\r\n            </Layer>\r\n        </Stage>\r\n    );\r\n};\r\n\r\n// Valeurs par d�faut pour les props\r\nPage.defaultProps = {\r\n    numRows: 22,\r\n    numCols: 10,\r\n};\r\n\r\nexport default Page;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}