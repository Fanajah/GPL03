{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\Projects\\\\GPL3\\\\point-game\\\\src\\\\Page.js\";\nimport React from 'react';\nimport { Stage, Layer, Line, Text } from 'react-konva';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Page = ({\n  numRows,\n  numCols\n}) => {\n  const width = 800;\n  const height = 600;\n  const scale = 50; // �chelle pour les graduations\n\n  // Ajuste le nombre de lignes horizontales en fonction de numRows\n  const renderHorizontalLines = () => {\n    const lines = [];\n    for (let i = 1; i <= numRows; i++) {\n      lines.push( /*#__PURE__*/_jsxDEV(Line, {\n        points: [0, i * scale, width, i * scale],\n        stroke: \"#ddd\"\n      }, `hline${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 17\n      }, this));\n    }\n    return lines;\n  };\n\n  // Ajuste le nombre de lignes verticales en fonction de numCols\n  const renderVerticalLines = () => {\n    const lines = [];\n    for (let i = 1; i <= numCols; i++) {\n      lines.push( /*#__PURE__*/_jsxDEV(Line, {\n        points: [i * scale, 0, i * scale, height],\n        stroke: \"#ddd\"\n      }, `vline${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this));\n    }\n    return lines;\n  };\n  return /*#__PURE__*/_jsxDEV(Stage, {\n    width: width,\n    height: height,\n    children: /*#__PURE__*/_jsxDEV(Layer, {\n      children: [renderHorizontalLines(), renderVerticalLines(), /*#__PURE__*/_jsxDEV(Line, {\n        points: [0, 0, width, 0],\n        stroke: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        points: [0, 0, 0, height],\n        stroke: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        x: width - 20,\n        y: -10,\n        text: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        x: -20,\n        y: height - 20,\n        text: \"Y\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n// Valeurs par d�faut pour les props si elles ne sont pas fournies\n_c = Page;\nPage.defaultProps = {\n  numRows: 10,\n  numCols: 10\n};\nexport default Page;\nvar _c;\n$RefreshReg$(_c, \"Page\");","map":{"version":3,"names":["React","Stage","Layer","Line","Text","jsxDEV","_jsxDEV","Page","numRows","numCols","width","height","scale","renderHorizontalLines","lines","i","push","points","stroke","fileName","_jsxFileName","lineNumber","columnNumber","renderVerticalLines","children","x","y","text","_c","defaultProps","$RefreshReg$"],"sources":["C:/Users/User/Documents/Projects/GPL3/point-game/src/Page.js"],"sourcesContent":["import React from 'react';\r\nimport { Stage, Layer, Line, Text } from 'react-konva';\r\n\r\nconst Page = ({ numRows, numCols }) => {\r\n    const width = 800;\r\n    const height = 600;\r\n    const scale = 50; // �chelle pour les graduations\r\n\r\n    // Ajuste le nombre de lignes horizontales en fonction de numRows\r\n    const renderHorizontalLines = () => {\r\n        const lines = [];\r\n        for (let i = 1; i <= numRows; i++) {\r\n            lines.push(\r\n                <Line\r\n                    key={`hline${i}`}\r\n                    points={[0, i * scale, width, i * scale]}\r\n                    stroke=\"#ddd\"\r\n                />\r\n            );\r\n        }\r\n        return lines;\r\n    };\r\n\r\n    // Ajuste le nombre de lignes verticales en fonction de numCols\r\n    const renderVerticalLines = () => {\r\n        const lines = [];\r\n        for (let i = 1; i <= numCols; i++) {\r\n            lines.push(\r\n                <Line\r\n                    key={`vline${i}`}\r\n                    points={[i * scale, 0, i * scale, height]}\r\n                    stroke=\"#ddd\"\r\n                />\r\n            );\r\n        }\r\n        return lines;\r\n    };\r\n\r\n    return (\r\n        <Stage width={width} height={height}>\r\n            <Layer>\r\n                {renderHorizontalLines()}\r\n                {renderVerticalLines()}\r\n\r\n                {/* Axes */}\r\n                <Line points={[0, 0, width, 0]} stroke=\"black\" />\r\n                <Line points={[0, 0, 0, height]} stroke=\"black\" />\r\n\r\n                {/* �tiquettes pour les axes */}\r\n                <Text x={width - 20} y={-10} text=\"X\" />\r\n                <Text x={-20} y={height - 20} text=\"Y\" />\r\n            </Layer>\r\n        </Stage>\r\n    );\r\n};\r\n\r\n// Valeurs par d�faut pour les props si elles ne sont pas fournies\r\nPage.defaultProps = {\r\n    numRows: 10,\r\n    numCols: 10,\r\n};\r\n\r\nexport default Page;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}